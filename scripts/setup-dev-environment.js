#!/usr/bin/env node

/**
 * WikiGaiaLab Development Environment Setup Script
 * Automates the complete development environment setup including local Supabase
 */

const { execSync, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ WikiGaiaLab Development Environment Setup\n');

// Colors for console output
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

function log(color, message) {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function checkPrerequisites() {
  log('blue', 'üìã Checking prerequisites...');
  
  try {
    // Check Node.js version
    const nodeVersion = execSync('node --version', { encoding: 'utf8' }).trim();
    const majorVersion = parseInt(nodeVersion.replace('v', '').split('.')[0]);
    
    if (majorVersion < 18) {
      log('red', `‚ùå Node.js version ${nodeVersion} is too old. Please install Node.js 18 or higher.`);
      process.exit(1);
    }
    log('green', `‚úÖ Node.js ${nodeVersion}`);
    
    // Check pnpm
    try {
      const pnpmVersion = execSync('pnpm --version', { encoding: 'utf8' }).trim();
      log('green', `‚úÖ pnpm ${pnpmVersion}`);
    } catch (error) {
      log('yellow', '‚ö†Ô∏è  pnpm not found. Installing...');
      execSync('npm install -g pnpm', { stdio: 'inherit' });
      log('green', '‚úÖ pnpm installed');
    }
    
    // Check Docker
    try {
      execSync('docker --version', { encoding: 'utf8' });
      log('green', '‚úÖ Docker is available');
    } catch (error) {
      log('red', '‚ùå Docker not found. Please install Docker Desktop from https://www.docker.com/products/docker-desktop/');
      process.exit(1);
    }
    
    // Check Supabase CLI
    try {
      const supabaseVersion = execSync('supabase --version', { encoding: 'utf8' }).trim();
      log('green', `‚úÖ Supabase CLI ${supabaseVersion}`);
    } catch (error) {
      log('yellow', '‚ö†Ô∏è  Supabase CLI not found. Installing...');
      execSync('npm install -g supabase', { stdio: 'inherit' });
      log('green', '‚úÖ Supabase CLI installed');
    }
    
  } catch (error) {
    log('red', `‚ùå Error checking prerequisites: ${error.message}`);
    process.exit(1);
  }
}

function installDependencies() {
  log('blue', 'üì¶ Installing project dependencies...');
  
  try {
    execSync('pnpm install', { stdio: 'inherit' });
    log('green', '‚úÖ Dependencies installed successfully');
  } catch (error) {
    log('red', `‚ùå Failed to install dependencies: ${error.message}`);
    process.exit(1);
  }
}

function setupSupabase() {
  log('blue', 'üóÑÔ∏è  Setting up local Supabase...');
  
  try {
    // Initialize Supabase if not already done
    if (!fs.existsSync('./supabase')) {
      log('yellow', 'Initializing Supabase...');
      execSync('supabase init', { stdio: 'inherit' });
    }
    
    // Check if Supabase is already running
    try {
      execSync('supabase status --local', { stdio: 'pipe' });
      log('yellow', 'Supabase is already running. Stopping and restarting...');
      execSync('supabase stop', { stdio: 'inherit' });
    } catch (error) {
      // Supabase not running, which is fine
    }
    
    // Start Supabase
    log('blue', 'Starting local Supabase (this may take a few minutes on first run)...');
    const supabaseOutput = execSync('supabase start', { encoding: 'utf8' });
    
    // Parse the output to extract connection details
    const lines = supabaseOutput.split('\n');
    const config = {};
    
    lines.forEach(line => {
      if (line.includes('API URL:')) config.apiUrl = line.split('API URL:')[1].trim();
      if (line.includes('DB URL:')) config.dbUrl = line.split('DB URL:')[1].trim();
      if (line.includes('Studio URL:')) config.studioUrl = line.split('Studio URL:')[1].trim();
      if (line.includes('anon key:')) config.anonKey = line.split('anon key:')[1].trim();
      if (line.includes('service_role key:')) config.serviceKey = line.split('service_role key:')[1].trim();
    });
    
    log('green', '‚úÖ Local Supabase started successfully!');
    log('blue', '\nüìä Supabase Connection Details:');
    log('green', `   API URL: ${config.apiUrl}`);
    log('green', `   Studio URL: ${config.studioUrl}`);
    log('green', `   Database URL: ${config.dbUrl}`);
    
    return config;
    
  } catch (error) {
    log('red', `‚ùå Failed to setup Supabase: ${error.message}`);
    log('yellow', 'Make sure Docker is running and try again.');
    process.exit(1);
  }
}

function createEnvironmentFile(supabaseConfig) {
  log('blue', '‚öôÔ∏è  Creating environment configuration...');
  
  const envContent = `# WikiGaiaLab Development Environment Configuration
# Generated by setup script

# Database Configuration
DATABASE_URL="${supabaseConfig.dbUrl}"
NEXT_PUBLIC_SUPABASE_URL="${supabaseConfig.apiUrl}"
NEXT_PUBLIC_SUPABASE_ANON_KEY="${supabaseConfig.anonKey}"
SUPABASE_SERVICE_KEY="${supabaseConfig.serviceKey}"

# App Configuration
NEXT_PUBLIC_APP_URL="http://localhost:3000"
NEXT_PUBLIC_APP_NAME="WikiGaiaLab"
NEXT_PUBLIC_APP_DESCRIPTION="Community-driven problem solving platform"
NODE_ENV="development"
DEBUG="false"

# Authentication (Optional - for testing Google OAuth)
# GOOGLE_CLIENT_ID="your-google-client-id"
# GOOGLE_CLIENT_SECRET="your-google-client-secret"
# NEXTAUTH_URL="http://localhost:3000"
# NEXTAUTH_SECRET="your-development-secret-min-32-chars"

# External APIs (Optional - for testing)
# OPENAI_API_KEY="sk-test-key"
# ANTHROPIC_API_KEY="sk-ant-test-key"
# RESEND_API_KEY="re_test_key"

# Payment Processing (Optional - for testing)
# STRIPE_PUBLIC_KEY="pk_test_..."
# STRIPE_SECRET_KEY="sk_test_..."
# STRIPE_WEBHOOK_SECRET="whsec_test_..."
`;

  fs.writeFileSync('.env.local', envContent);
  log('green', '‚úÖ Environment file created (.env.local)');
}

function setupDatabase() {
  log('blue', 'üóÉÔ∏è  Setting up database schema...');
  
  try {
    // Run database setup script
    execSync('node packages/database/scripts/setup-database.js', { stdio: 'inherit' });
    log('green', '‚úÖ Database schema applied successfully');
  } catch (error) {
    log('red', `‚ùå Failed to setup database: ${error.message}`);
    // Don't exit here, as the user can set up the database manually
  }
}

function runTests() {
  log('blue', 'üß™ Running initial tests...');
  
  try {
    // Type checking
    execSync('pnpm run type-check', { stdio: 'inherit' });
    log('green', '‚úÖ TypeScript compilation successful');
    
    // Linting
    execSync('pnpm run lint', { stdio: 'inherit' });
    log('green', '‚úÖ Linting passed');
    
    // Test database connection
    execSync('pnpm run db:test', { stdio: 'inherit' });
    log('green', '‚úÖ Database connection test passed');
    
  } catch (error) {
    log('yellow', `‚ö†Ô∏è  Some tests failed: ${error.message}`);
    log('yellow', 'You can fix these issues later.');
  }
}

function printSuccessMessage(supabaseConfig) {
  log('green', '\nüéâ Development environment setup complete!\n');
  
  console.log(`${colors.blue}üìã Next Steps:${colors.reset}

${colors.green}1. Start the development server:${colors.reset}
   pnpm dev

${colors.green}2. Open your browser:${colors.reset}
   http://localhost:3000

${colors.green}3. Access Supabase Studio:${colors.reset}
   ${supabaseConfig.studioUrl}

${colors.green}4. Optional - Configure Google OAuth:${colors.reset}
   - Go to Google Cloud Console
   - Create OAuth 2.0 credentials
   - Add to .env.local file

${colors.blue}üìö Useful Commands:${colors.reset}
   pnpm dev              # Start development server
   pnpm test            # Run tests
   pnpm run type-check  # TypeScript checking
   pnpm run lint        # Code linting
   supabase status      # Check Supabase status
   supabase stop        # Stop Supabase
   supabase start       # Start Supabase

${colors.blue}üîß Development URLs:${colors.reset}
   App:       http://localhost:3000
   Supabase:  ${supabaseConfig.studioUrl}
   Database:  ${supabaseConfig.dbUrl}

${colors.yellow}üí° Tip: Keep the terminal open where Supabase is running!${colors.reset}
`);
}

// Main execution
async function main() {
  try {
    checkPrerequisites();
    installDependencies();
    const supabaseConfig = setupSupabase();
    createEnvironmentFile(supabaseConfig);
    setupDatabase();
    runTests();
    printSuccessMessage(supabaseConfig);
  } catch (error) {
    log('red', `‚ùå Setup failed: ${error.message}`);
    process.exit(1);
  }
}

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
  log('yellow', '\n‚ö†Ô∏è  Setup interrupted. You may need to run this script again.');
  process.exit(1);
});

main();